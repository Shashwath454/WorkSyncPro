const express =require("express");
const path =require("path");
const bcrypt =require("bcrypt");
const collection = require("./config");

const app= express();

app.use(express.json());

app.use(express.urlencoded({extended: false}));


app.set('view engine','ejs');

app.use(express.static("public"));


app.get("/",(req,res)=>{
    res.render("login");

});

app.get("/signup",(req ,res)=>{
    res.render("signup");

});

app.post("/signup", async (req, res) => {
    try {
        const data = {
            name: req.body.username,
            password: req.body.password
        };

        const existingUser = await collection.findOne({ name: data.name });

        if (existingUser) {
            return res.send("User already exists. Please choose a different username.");
        }

        const saltRounds = 10;
        const hashingPassword = await bcrypt.hash(data.password, saltRounds);

        data.password = hashingPassword;

        const newUser = await collection.create(data);
        console.log("New user registered:", newUser);

        res.send("User registered successfully!");
    } catch (error) {
        console.error("Error registering user:", error);
        res.status(500).send("Internal Server Error");
    }
});
app.post("/login", async(req,res)=>{
    try{
        const check = await collection.findOne({name:req.body.username});
        if(check){
            res.send("user name not found!")

        }

        const isPasswordMatch = await bcrypt.compare(req.body.password,check.password);
        if(isPasswordMatch){
            res.render("home");
        }else{
            req.send("wrong password");
        }
    }catch{
        res.send("wrong details");

}
});

const port=5000;
app.listen(port, () => {
    console.log(`server running on port: ${port}`);

})